@{
    ViewData["Title"] = "Chat Inbox";
    Layout = "_Layout";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1 class="h3 mb-0 text-gray-800">Chat Inbox</h1>
                <button class="btn btn-primary" id="newConversationBtn">
                    <i class="fas fa-plus me-2"></i>New Chat
                </button>
            </div>
        </div>
    </div>

    <div class="row">
        <!-- Conversations List -->
        <div class="col-md-4 col-lg-3">
            <div class="card shadow mb-4">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">Conversations</h6>
                </div>
                <div class="card-body p-0">
                    <div class="list-group list-group-flush" id="conversationsList">
                        <!-- Conversations will be loaded here -->
                    </div>
                </div>
            </div>

            <!-- Available Tutors -->
            <div class="card shadow">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">Available Tutors</h6>
                </div>
                <div class="card-body p-0">
                    <div class="list-group list-group-flush" id="tutorsList">
                        <!-- Tutors will be loaded here -->
                    </div>
                </div>
            </div>
        </div>

        <!-- Chat Area -->
        <div class="col-md-8 col-lg-9">
            <div class="card shadow">
                <div class="card-header py-3 d-flex justify-content-between align-items-center">
                    <h6 class="m-0 font-weight-bold text-primary" id="currentChatTitle">Select a conversation</h6>
                    <div id="chatActions" class="d-none">
                        <button class="btn btn-sm btn-outline-danger" id="deleteConversationBtn">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </div>
                <div class="card-body">
                    <!-- Messages Container -->
                    <div id="messagesContainer" class="messages-container" style="height: 400px; overflow-y: auto;">
                        <div class="text-center text-muted py-5">
                            <i class="fas fa-comments fa-3x mb-3"></i>
                            <p>Select a conversation to start messaging</p>
                        </div>
                    </div>

                    <!-- Message Input -->
                    <div class="message-input-container mt-3 d-none" id="messageInputContainer">
                        <div class="input-group">
                            <textarea id="messageInput" class="form-control" placeholder="Type your message..." rows="2"></textarea>
                            <button id="sendMessageBtn" class="btn btn-primary">
                                <i class="fas fa-paper-plane"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- New Conversation Modal -->
<div class="modal fade" id="newConversationModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Start New Conversation</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="newConversationForm">
                    <div class="mb-3">
                        <label class="form-label">Select Tutor</label>
                        <select class="form-select" id="tutorSelect" required>
                            <option value="">Choose a tutor...</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Initial Message</label>
                        <textarea class="form-control" id="initialMessage" rows="3" placeholder="Type your first message..." required></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="startConversationBtn">Start Conversation</button>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <style>
        .messages-container {
            border: 1px solid #e3e6f0;
            border-radius: 0.35rem;
            padding: 1rem;
            background-color: #f8f9fc;
        }

        .message {
            margin-bottom: 1rem;
            padding: 0.75rem;
            border-radius: 0.5rem;
            max-width: 80%;
        }

        .message-user {
            background-color: #007bff;
            color: white;
            margin-left: auto;
        }

        .message-ai {
            background-color: white;
            border: 1px solid #e3e6f0;
        }

        .message-time {
            font-size: 0.75rem;
            opacity: 0.7;
            margin-top: 0.25rem;
        }

        .conversation-item {
            border: none;
            border-bottom: 1px solid #e3e6f0;
            transition: background-color 0.2s;
        }

            .conversation-item:hover {
                background-color: #f8f9fa;
            }

            .conversation-item.active {
                background-color: #e3f2fd;
                border-left: 4px solid #007bff;
            }

        .unread-badge {
            background-color: #dc3545;
            color: white;
            border-radius: 50%;
            width: 20px;
            height: 20px;
            font-size: 0.75rem;
            display: flex;
            align-items: center;
            justify-content: center;
        }
    </style>
}

@section Scripts {
    <script>
        let currentConversationId = null;
        let messagePollInterval = null;

        document.addEventListener('DOMContentLoaded', function() {
            initializeChat();
        });

        function initializeChat() {
            loadConversations();
            loadTutors();
            setupEventListeners();
            startMessagePolling();
        }

        function setupEventListeners() {
            // New conversation button
            document.getElementById('newConversationBtn').addEventListener('click', showNewConversationModal);

            // Start conversation button
            document.getElementById('startConversationBtn').addEventListener('click', startNewConversation);

            // Send message button
            document.getElementById('sendMessageBtn').addEventListener('click', sendMessage);

            // Message input enter key
            document.getElementById('messageInput').addEventListener('keypress', function(e) {
                if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    sendMessage();
                }
            });

            // Delete conversation button
            document.getElementById('deleteConversationBtn').addEventListener('click', deleteCurrentConversation);
        }

        async function loadConversations() {
            try {
                const response = await fetch('/Chat/GetConversations');
                const result = await response.json();

                if (result.success) {
                    displayConversations(result.conversations);
                } else {
                    showError('Failed to load conversations');
                }
            } catch (error) {
                console.error('Error loading conversations:', error);
                showError('Error loading conversations');
            }
        }

        async function loadTutors() {
            try {
                // This would typically come from your backend
                const tutors = @Html.Raw(Json.Serialize(ViewBag.Tutors));
                displayTutors(tutors);
            } catch (error) {
                console.error('Error loading tutors:', error);
            }
        }

        function displayConversations(conversations) {
            const container = document.getElementById('conversationsList');

            if (conversations.length === 0) {
                container.innerHTML = `
                    <div class="text-center text-muted py-3">
                        <i class="fas fa-inbox fa-2x mb-2"></i>
                        <p>No conversations yet</p>
                    </div>
                `;
                return;
            }

            container.innerHTML = conversations.map(conv => `
                <a href="#" class="list-group-item list-group-item-action conversation-item ${currentConversationId === conv.conversationId ? 'active' : ''}"
                   onclick="selectConversation('${conv.conversationId}', '${conv.title}')">
                    <div class="d-flex w-100 justify-content-between">
                        <h6 class="mb-1">${conv.title}</h6>
                        <small>${formatDate(conv.updatedAt)}</small>
                    </div>
                    <p class="mb-1 text-muted">${conv.lastMessage || 'No messages yet'}</p>
                </a>
            `).join('');
        }

        function displayTutors(tutors) {
            const container = document.getElementById('tutorsList');
            const select = document.getElementById('tutorSelect');

            if (tutors.length === 0) {
                container.innerHTML = '<div class="text-muted p-3">No tutors available</div>';
                return;
            }

            container.innerHTML = tutors.map(tutor => `
                <div class="list-group-item list-group-item-action d-flex justify-content-between align-items-center">
                    <div>
                        <strong>${tutor.fullName}</strong>
                        <div class="text-muted small">${tutor.email}</div>
                    </div>
                    <button class="btn btn-sm btn-outline-primary" onclick="startChatWithTutor('${tutor.id}', '${tutor.fullName}')">
                        Chat
                    </button>
                </div>
            `).join('');

            select.innerHTML = '<option value="">Choose a tutor...</option>' +
                tutors.map(tutor => `<option value="${tutor.id}">${tutor.fullName} - ${tutor.email}</option>`).join('');
        }

        function showNewConversationModal() {
            const modal = new bootstrap.Modal(document.getElementById('newConversationModal'));
            modal.show();
        }

        async function startNewConversation() {
            const tutorId = document.getElementById('tutorSelect').value;
            const initialMessage = document.getElementById('initialMessage').value;

            if (!tutorId || !initialMessage.trim()) {
                showError('Please select a tutor and write a message');
                return;
            }

            try {
                const response = await fetch('/Chat/CreateConversation', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        title: `Chat with ${document.getElementById('tutorSelect').selectedOptions[0].text.split(' - ')[0]}`,
                        tutorId: tutorId
                    })
                });

                const result = await response.json();

                if (result.success) {
                    // Send initial message
                    await sendMessageToConversation(result.conversation.conversationId, initialMessage);

                    // Close modal and refresh
                    bootstrap.Modal.getInstance(document.getElementById('newConversationModal')).hide();
                    document.getElementById('newConversationForm').reset();
                    loadConversations();
                    selectConversation(result.conversation.conversationId, result.conversation.title);
                } else {
                    showError('Failed to create conversation');
                }
            } catch (error) {
                console.error('Error starting conversation:', error);
                showError('Error starting conversation');
            }
        }

        function startChatWithTutor(tutorId, tutorName) {
            document.getElementById('tutorSelect').value = tutorId;
            document.getElementById('initialMessage').value = `Hello ${tutorName}, I would like to schedule a session.`;
            showNewConversationModal();
        }

        async function selectConversation(conversationId, title) {
            currentConversationId = conversationId;

            // Update UI
            document.querySelectorAll('.conversation-item').forEach(item => {
                item.classList.remove('active');
            });
            event.target.closest('.conversation-item').classList.add('active');

            document.getElementById('currentChatTitle').textContent = title;
            document.getElementById('chatActions').classList.remove('d-none');
            document.getElementById('messageInputContainer').classList.remove('d-none');

            await loadMessages(conversationId);
        }

        async function loadMessages(conversationId) {
            try {
                const response = await fetch(`/Chat/GetMessages?conversationId=${conversationId}`);
                const result = await response.json();

                if (result.success) {
                    displayMessages(result.messages);
                } else {
                    showError('Failed to load messages');
                }
            } catch (error) {
                console.error('Error loading messages:', error);
                showError('Error loading messages');
            }
        }

        function displayMessages(messages) {
            const container = document.getElementById('messagesContainer');

            if (messages.length === 0) {
                container.innerHTML = '<div class="text-center text-muted py-5">No messages yet. Start the conversation!</div>';
                return;
            }

            container.innerHTML = messages.map(msg => `
                <div class="message ${msg.isUserMessage ? 'message-user' : 'message-ai'}">
                    <div class="message-content">${escapeHtml(msg.messageText)}</div>
                    <div class="message-time">${formatTime(msg.createdAt)}</div>
                </div>
            `).join('');

            // Scroll to bottom
            container.scrollTop = container.scrollHeight;
        }

        async function sendMessage() {
            const messageInput = document.getElementById('messageInput');
            const message = messageInput.value.trim();

            if (!message || !currentConversationId) {
                return;
            }

            try {
                const response = await fetch('/Chat/SendMessage', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({
                        message: message,
                        conversationId: currentConversationId
                    })
                });

                const result = await response.json();

                if (result.success) {
                    messageInput.value = '';
                    await loadMessages(currentConversationId);
                    await loadConversations(); // Refresh conversation list
                } else {
                    showError('Failed to send message');
                }
            } catch (error) {
                console.error('Error sending message:', error);
                showError('Error sending message');
            }
        }

        async function sendMessageToConversation(conversationId, message) {
            // Similar to sendMessage but for initial messages
            await fetch('/Chat/SendMessage', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify({
                    message: message,
                    conversationId: conversationId
                })
            });
        }

        async function deleteCurrentConversation() {
            if (!currentConversationId || !confirm('Are you sure you want to delete this conversation?')) {
                return;
            }

            try {
                // You would need to implement this endpoint
                const response = await fetch(`/Chat/DeleteConversation?conversationId=${currentConversationId}`, {
                    method: 'DELETE',
                    headers: {
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    }
                });

                if (response.ok) {
                    currentConversationId = null;
                    document.getElementById('messagesContainer').innerHTML = '<div class="text-center text-muted py-5">Select a conversation to start messaging</div>';
                    document.getElementById('messageInputContainer').classList.add('d-none');
                    document.getElementById('chatActions').classList.add('d-none');
                    document.getElementById('currentChatTitle').textContent = 'Select a conversation';
                    loadConversations();
                } else {
                    showError('Failed to delete conversation');
                }
            } catch (error) {
                console.error('Error deleting conversation:', error);
                showError('Error deleting conversation');
            }
        }

        function startMessagePolling() {
            // Poll for new messages every 5 seconds
            messagePollInterval = setInterval(() => {
                if (currentConversationId) {
                    loadMessages(currentConversationId);
                }
                loadConversations(); // Refresh conversation list for unread counts
            }, 5000);
        }

        function stopMessagePolling() {
            if (messagePollInterval) {
                clearInterval(messagePollInterval);
            }
        }

        // Utility functions
        function formatDate(dateString) {
            const date = new Date(dateString);
            return date.toLocaleDateString();
        }

        function formatTime(dateString) {
            const date = new Date(dateString);
            return date.toLocaleTimeString();
        }

        function escapeHtml(unsafe) {
            return unsafe
                .replace(/&/g, "&amp;")
                .replace(/</g, "&lt;")
                .replace(/>/g, "&gt;")
                .replace(/"/g, "&quot;")
                .replace(/'/g, "&#039;");
        }

        function showError(message) {
            // You can use Toastr or similar for better notifications
            alert(message);
        }

        // Clean up on page unload
        window.addEventListener('beforeunload', stopMessagePolling);
    </script>
}