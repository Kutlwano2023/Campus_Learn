@model List<CampusLearn.Models.Conversation>

<div id="messagingPanel" class="fixed inset-y-0 right-0 w-96 bg-white shadow-xl transform translate-x-full transition-transform duration-300 z-50 border-l border-gray-200">
    <div class="h-full flex flex-col">
        <!-- Header -->
        <div class="flex items-center justify-between p-4 border-b border-gray-200 bg-white">
            <h3 class="text-lg font-semibold text-gray-900">Messages</h3>
            <button onclick="closeMessaging()" class="p-2 hover:bg-gray-100 rounded-lg transition-colors">
                <i class="fas fa-times text-gray-500"></i>
            </button>
        </div>

        <!-- Search Section -->
        <div class="p-4 border-b border-gray-200 bg-white">
            <div class="relative">
                <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <i class="fas fa-search text-gray-400"></i>
                </div>
                <input type="text"
                       id="userSearch"
                       placeholder="Search users by full name or email..."
                       class="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors">
            </div>
            <div id="searchResults" class="hidden absolute z-50 w-80 mt-2 bg-white border border-gray-200 rounded-lg shadow-lg max-h-60 overflow-y-auto"></div>
        </div>

        <!-- Conversations List -->
        <div class="flex-1 overflow-y-auto bg-gray-50">
            <div id="conversationsList">
                @if (Model != null && Model.Any())
                {
                    @foreach (var conversation in Model)
                    {
                        var otherUser = conversation.Participants?.FirstOrDefault();
                        var userName = otherUser?.FullName ?? "Unknown User";
                        var userEmail = otherUser?.Email ?? "No email available";
                        var userInitial = !string.IsNullOrEmpty(userName) ? userName[0] : 'U';
                        var userId = otherUser != null ? otherUser.Id.ToString() : "";

                        <div class="conversation-item p-4 border-b border-gray-100 hover:bg-white cursor-pointer transition-colors"
                             data-conversation-id="@conversation.Id"
                             data-user-id="@userId"
                             data-user-fullname="@userName">
                            <div class="flex items-center space-x-3">
                                <div class="flex-shrink-0">
                                    <div class="w-10 h-10 bg-gradient-to-br from-blue-500 to-blue-600 rounded-full flex items-center justify-center text-white font-semibold shadow-sm">
                                        @userInitial
                                    </div>
                                </div>
                                <div class="flex-1 min-w-0">
                                    <div class="flex justify-between items-start mb-1">
                                        <h4 class="font-semibold text-gray-900 text-sm truncate">@userName</h4>
                                        <span class="text-xs text-gray-500 whitespace-nowrap ml-2">
                                            @conversation.LastMessageAt.ToString("MMM dd")
                                        </span>
                                    </div>
                                    <p class="text-sm text-gray-600 truncate mb-1">
                                        @(conversation.LastMessagePreview ?? "No messages yet")
                                    </p>
                                    <p class="text-xs text-gray-400 truncate">@userEmail</p>
                                </div>
                                @if (conversation.UnreadCount > 0)
                                {
                                    <div class="flex-shrink-0">
                                        <span class="bg-red-500 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center font-medium shadow-sm">
                                            @conversation.UnreadCount
                                        </span>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="flex flex-col items-center justify-center h-64 text-gray-500">
                        <div class="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mb-4">
                            <i class="fas fa-comments text-gray-400 text-xl"></i>
                        </div>
                        <p class="font-medium text-gray-600 mb-2">No conversations yet</p>
                        <p class="text-sm text-gray-400 text-center px-8">
                            Start a new conversation by searching for users above
                        </p>
                    </div>
                }
            </div>
        </div>

        <!-- Active Chat -->
        <div id="activeChat" class="hidden flex-1 flex flex-col">
            <!-- Chat Header -->
            <div class="flex items-center justify-between p-4 border-b border-gray-200 bg-white">
                <div class="flex items-center space-x-3">
                    <button onclick="showConversations()" class="p-2 hover:bg-gray-100 rounded-lg transition-colors">
                        <i class="fas fa-arrow-left text-gray-600"></i>
                    </button>
                    <div>
                        <h4 id="chatUserName" class="font-semibold text-gray-900">Select a conversation</h4>
                        <span id="chatUserStatus" class="text-xs text-gray-500">Offline</span>
                    </div>
                </div>
            </div>

            <!-- Messages Area -->
            <div id="messagesContainer" class="flex-1 overflow-y-auto p-4 space-y-4 bg-gray-50">
                <div class="flex flex-col items-center justify-center h-full text-gray-500">
                    <div class="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mb-4">
                        <i class="fas fa-comments text-gray-400 text-xl"></i>
                    </div>
                    <p class="font-medium text-gray-600 mb-2">No conversation selected</p>
                    <p class="text-sm text-gray-400 text-center">
                        Select a conversation from the list to start messaging
                    </p>
                </div>
            </div>

            <!-- Message Input -->
            <div class="p-4 border-t border-gray-200 bg-white">
                <div class="flex space-x-3">
                    <input type="text"
                           id="messageInput"
                           placeholder="Type your message..."
                           class="flex-1 px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors disabled:bg-gray-100 disabled:cursor-not-allowed"
                           disabled>
                    <button id="sendMessage"
                            class="px-6 py-3 bg-blue-500 text-white rounded-lg hover:bg-blue-600 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors shadow-sm"
                            disabled>
                        <i class="fas fa-paper-plane"></i>
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    // Initialize when document is ready
    document.addEventListener('DOMContentLoaded', function() {
        console.log('Initializing messaging system...');
        initializeMessaging();
        setupEventListeners();
        startPeriodicRefresh();

        // Request notification permission
        if ('Notification' in window && Notification.permission === 'default') {
            Notification.requestPermission();
        }
    });

    let currentConnection = null;
    let currentConversationId = null;
    let currentReceiverId = null;
    let allUsers = []; // Store all registered users

    function setupEventListeners() {
        // Conversation item clicks
        document.addEventListener('click', function(e) {
            const conversationItem = e.target.closest('.conversation-item');
            if (conversationItem) {
                const conversationId = conversationItem.getAttribute('data-conversation-id');
                const userId = conversationItem.getAttribute('data-user-id');
                const userFullName = conversationItem.getAttribute('data-user-fullname');
                if (conversationId && userId) {
                    openConversation(conversationId, userId, userFullName);
                }
            }
        });

        // Send message functionality
        const sendButton = document.getElementById('sendMessage');
        const messageInput = document.getElementById('messageInput');

        if (sendButton) {
            sendButton.addEventListener('click', sendMessage);
        }

        if (messageInput) {
            messageInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    sendMessage();
                }
            });
        }

        // User search functionality - using full names
        const userSearch = document.getElementById('userSearch');
        if (userSearch) {
            userSearch.addEventListener('input', debounce(handleUserSearch, 300));
            userSearch.addEventListener('focus', function() {
                const results = document.getElementById('searchResults');
                if (allUsers.length > 0 || this.value.trim().length >= 2) {
                    results.classList.remove('hidden');
                    // If search box is empty but has focus, show all users
                    if (this.value.trim().length === 0) {
                        renderSearchResults(allUsers);
                    }
                }
            });
        }

        // Close search results when clicking outside
        document.addEventListener('click', function(e) {
            if (!e.target.closest('#userSearch') && !e.target.closest('#searchResults')) {
                document.getElementById('searchResults').classList.add('hidden');
            }
        });
    }

    function initializeMessaging() {
        console.log('Setting up SignalR connection...');

        currentConnection = new signalR.HubConnectionBuilder()
            .withUrl("/messagingHub")
            .withAutomaticReconnect()
            .build();

        // Handle received messages
        currentConnection.on("ReceiveMessage", (message) => {
            console.log('Received message:', message);

            // Update unread count immediately when receiving a new message
            updateUnreadCounts();

            if (message.conversationId === currentConversationId) {
                addMessageToChat(message, false);
                scrollToBottom();

                // If we're in the active conversation, mark as read
                if (currentConversationId) {
                    markConversationAsRead(currentConversationId);
                }
            } else {
                // Show notification for new message in other conversation
                showNewMessageNotification(message);
                // Refresh conversations to show updated unread counts
                loadConversations();
            }
        });

        // Handle sent message confirmation
        currentConnection.on("MessageSent", (message) => {
            console.log('Message sent:', message);
            addMessageToChat(message, true);
            scrollToBottom();
            // Refresh conversations to update last message preview
            loadConversations();
        });

        // Handle user status changes
        currentConnection.on("UserStatusChanged", (userId, isOnline) => {
            console.log('User status changed:', userId, isOnline);
            if (userId === currentReceiverId) {
                updateUserStatus(isOnline);
            }
            updateUserOnlineStatus(userId, isOnline);
        });

        // Handle user search results
        currentConnection.on("UserSearchResults", (users) => {
            console.log('Received search results:', users);
            renderSearchResults(users);
        });

        // Handle loaded registered users
        currentConnection.on("RegisteredUsersLoaded", (users) => {
            console.log('Received all registered users:', users);
            allUsers = users;
        });

        // Handle user found by full name
        currentConnection.on("UserFoundByFullName", (user) => {
            console.log('User found by full name:', user);
            startNewConversation(user.id, user.fullName);
        });

        // Handle user not found
        currentConnection.on("UserNotFound", (message) => {
            console.log('User not found:', message);
            showSearchError(message);
        });

        // Handle search errors
        currentConnection.on("SearchError", (errorMessage) => {
            console.error('Search error:', errorMessage);
            showSearchError(errorMessage);
        });

        // Handle connection events
        currentConnection.onreconnecting(() => {
            console.log('SignalR reconnecting...');
        });

        currentConnection.onreconnected(() => {
            console.log('SignalR reconnected');
            // Refresh data after reconnection
            loadConversations();
            updateUnreadCounts();
        });

        currentConnection.start()
            .then(() => {
                console.log('SignalR connected');
                loadRegisteredUsers();
                loadConversations();
                updateUnreadCounts();
            })
            .catch(err => console.error('SignalR connection error:', err));
    }

    function loadRegisteredUsers() {
        if (currentConnection) {
            currentConnection.invoke("GetRegisteredUsers")
                .catch(err => console.error('Error loading registered users:', err));
        }
    }

    function handleUserSearch(e) {
        const query = e.target.value.trim();
        const resultsContainer = document.getElementById('searchResults');

        if (query.length === 0) {
            renderSearchResults(allUsers);
            resultsContainer.classList.remove('hidden');
            return;
        }

        if (query.length < 2) {
            resultsContainer.classList.add('hidden');
            return;
        }

        console.log('Searching users with query:', query);

        // Show loading state
        resultsContainer.innerHTML = `
            <div class="p-4 text-center text-gray-500">
                <i class="fas fa-spinner fa-spin me-2"></i>
                Searching users by name...
            </div>`;
        resultsContainer.classList.remove('hidden');

        // Use SignalR to search users by full name
        if (currentConnection) {
            currentConnection.invoke("SearchUsers", query)
                .catch(err => {
                    console.error('Error invoking search:', err);
                    showSearchError('Search failed');
                });
        }
    }

    function renderSearchResults(users) {
        const container = document.getElementById('searchResults');

        if (users && users.length > 0) {
            let html = `
                <div class="p-3 bg-gray-50 border-b border-gray-200 sticky top-0">
                    <div class="flex justify-between items-center">
                        <span class="text-sm font-medium text-gray-700">Users (${users.length})</span>
                        <span class="text-xs text-gray-500">Click to start conversation</span>
                    </div>
                </div>`;

            html += users.map(user => {
                const onlineStatus = user.isOnline ?
                    '<span class="w-2 h-2 bg-green-500 rounded-full mr-2"></span>Online' :
                    '<span class="w-2 h-2 bg-gray-400 rounded-full mr-2"></span>Offline';

                const displayName = user.fullName || user.userName || 'Unknown User';
                const displayEmail = user.email || 'No email';

                return `
                <div class="p-3 hover:bg-blue-50 cursor-pointer border-b border-gray-100 transition-colors group"
                     onclick="startNewConversation('${user.id}', '${displayName.replace(/'/g, "\\'")}')">
                    <div class="flex items-center justify-between">
                        <div class="flex items-center space-x-3">
                            <div class="w-10 h-10 bg-gradient-to-br from-green-500 to-green-600 rounded-full flex items-center justify-center text-white font-semibold shadow-sm">
                                ${displayName[0].toUpperCase()}
                            </div>
                            <div>
                                <div class="font-semibold text-gray-900 text-sm">${displayName}</div>
                                <div class="text-xs text-gray-600">${displayEmail}</div>
                            </div>
                        </div>
                        <div class="flex items-center space-x-2">
                            <div class="flex items-center text-xs text-gray-500">
                                ${onlineStatus}
                            </div>
                            <span class="bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded-full capitalize">
                                ${(user.role || 'User').toLowerCase()}
                            </span>
                        </div>
                    </div>
                </div>`;
            }).join('');

            container.innerHTML = html;
        } else {
            container.innerHTML = `
                <div class="p-4 text-center text-gray-500">
                    <i class="fas fa-user-slash text-gray-400 text-xl mb-2"></i>
                    <p class="text-sm">No users found</p>
                    <p class="text-xs text-gray-400 mt-1">Try searching by full name or email</p>
                </div>`;
        }

        container.classList.remove('hidden');
    }

    function updateUserOnlineStatus(userId, isOnline) {
        // Update in allUsers array
        const userIndex = allUsers.findIndex(u => u.id === userId);
        if (userIndex !== -1) {
            allUsers[userIndex].isOnline = isOnline;
        }

        // Update in search results if visible
        const searchResults = document.getElementById('searchResults');
        if (!searchResults.classList.contains('hidden')) {
            const userElements = searchResults.querySelectorAll('[onclick]');
            userElements.forEach(element => {
                if (element.getAttribute('onclick').includes(userId)) {
                    const onlineStatusElement = element.querySelector('.flex.items-center.text-xs');
                    if (onlineStatusElement) {
                        onlineStatusElement.innerHTML = isOnline ?
                            '<span class="w-2 h-2 bg-green-500 rounded-full mr-2"></span>Online' :
                            '<span class="w-2 h-2 bg-gray-400 rounded-full mr-2"></span>Offline';
                    }
                }
            });
        }
    }

    function showSearchError(message) {
        const container = document.getElementById('searchResults');
        container.innerHTML = `
            <div class="p-4 text-center text-red-500">
                <i class="fas fa-exclamation-triangle me-2"></i>
                <span class="text-sm">${message}</span>
            </div>`;
        container.classList.remove('hidden');
    }

    function updateUserStatus(isOnline) {
        const statusElement = document.getElementById('chatUserStatus');
        if (isOnline) {
            statusElement.innerHTML = '<span class="w-2 h-2 bg-green-500 rounded-full mr-1"></span>Online';
            statusElement.className = 'text-xs text-green-600 flex items-center';
        } else {
            statusElement.innerHTML = '<span class="w-2 h-2 bg-gray-400 rounded-full mr-1"></span>Offline';
            statusElement.className = 'text-xs text-gray-500 flex items-center';
        }
    }

    function toggleMessaging() {
        const panel = document.getElementById('messagingPanel');
        const isHidden = panel.classList.contains('translate-x-full');

        if (isHidden) {
            panel.classList.remove('translate-x-full');
            if (currentConnection && currentConnection.state === 'Connected') {
                loadConversations();
                loadRegisteredUsers();
            }
        } else {
            panel.classList.add('translate-x-full');
        }
    }

    function closeMessaging() {
        document.getElementById('messagingPanel').classList.add('translate-x-full');
    }

    function showConversations() {
        document.getElementById('activeChat').classList.add('hidden');
        document.getElementById('conversationsList').classList.remove('hidden');
        document.getElementById('messageInput').disabled = true;
        document.getElementById('sendMessage').disabled = true;

        // Reset current conversation
        currentConversationId = null;
        currentReceiverId = null;
    }

    async function loadConversations() {
        try {
            console.log('Loading conversations from API...');
            const response = await fetch('/api/messaging/conversations');
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const conversations = await response.json();
            console.log('Loaded conversations:', conversations);
            renderConversations(conversations);
        } catch (error) {
            console.error('Error loading conversations:', error);
            showError('Failed to load conversations');
        }
    }

    function renderConversations(conversations) {
        const container = document.getElementById('conversationsList');

        if (conversations && conversations.length > 0) {
            container.innerHTML = conversations.map(conv => {
                const otherUser = conv.participants?.[0];
                const userName = otherUser?.fullName || 'Unknown User';
                const userEmail = otherUser?.email || 'No email available';
                const userInitial = userName ? userName[0].toUpperCase() : 'U';
                const userId = otherUser?.id || '';

                return `
                <div class="conversation-item p-4 border-b border-gray-100 hover:bg-white cursor-pointer transition-colors"
                     data-conversation-id="${conv.id}"
                     data-user-id="${userId}"
                     data-user-fullname="${userName.replace(/"/g, '&quot;')}">
                    <div class="flex items-center space-x-3">
                        <div class="flex-shrink-0">
                            <div class="w-10 h-10 bg-gradient-to-br from-blue-500 to-blue-600 rounded-full flex items-center justify-center text-white font-semibold shadow-sm">
                                ${userInitial}
                            </div>
                        </div>
                        <div class="flex-1 min-w-0">
                            <div class="flex justify-between items-start mb-1">
                                <h4 class="font-semibold text-gray-900 text-sm truncate">${userName}</h4>
                                <span class="text-xs text-gray-500 whitespace-nowrap ml-2">
                                    ${new Date(conv.lastMessageAt).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}
                                </span>
                            </div>
                            <p class="text-sm text-gray-600 truncate mb-1">
                                ${conv.lastMessagePreview || 'No messages yet'}
                            </p>
                            <p class="text-xs text-gray-400 truncate">${userEmail}</p>
                        </div>
                        ${conv.unreadCount > 0 ? `
                            <div class="flex-shrink-0">
                                <span class="bg-red-500 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center font-medium shadow-sm">
                                    ${conv.unreadCount}
                                </span>
                            </div>
                        ` : ''}
                    </div>
                </div>`;
            }).join('');
        } else {
            container.innerHTML = `
                <div class="flex flex-col items-center justify-center h-64 text-gray-500">
                    <div class="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mb-4">
                        <i class="fas fa-comments text-gray-400 text-xl"></i>
                    </div>
                    <p class="font-medium text-gray-600 mb-2">No conversations yet</p>
                    <p class="text-sm text-gray-400 text-center px-8">
                        Start a new conversation by searching for users above
                    </p>
                </div>`;
        }
    }

    async function openConversation(conversationId, receiverId, userFullName) {
        console.log('Opening conversation:', conversationId, 'with user:', receiverId, userFullName);

        if (!conversationId || !receiverId) {
            console.error('Invalid conversation or user ID');
            return;
        }

        currentConversationId = conversationId;
        currentReceiverId = receiverId;

        // Update UI - highlight active conversation
        document.querySelectorAll('.conversation-item').forEach(item => {
            item.classList.remove('active', 'bg-blue-50');
        });
        const activeItem = document.querySelector(`[data-conversation-id="${conversationId}"]`);
        if (activeItem) {
            activeItem.classList.add('active', 'bg-blue-50');

            // Remove unread badge from this conversation in the UI
            const unreadBadge = activeItem.querySelector('.bg-red-500');
            if (unreadBadge) {
                unreadBadge.remove();
            }
        }

        // Show chat interface
        document.getElementById('conversationsList').classList.add('hidden');
        document.getElementById('activeChat').classList.remove('hidden');

        // Enable message input
        document.getElementById('messageInput').disabled = false;
        document.getElementById('sendMessage').disabled = false;

        // Set chat header using the full name
        document.getElementById('chatUserName').textContent = userFullName || 'Unknown User';

        // Check online status
        if (currentConnection) {
            currentConnection.invoke("GetOnlineUsers")
                .then(onlineUsers => {
                    const isOnline = onlineUsers.includes(receiverId);
                    updateUserStatus(isOnline);
                })
                .catch(err => console.error('Error getting online users:', err));
        }

        // Load messages
        await loadMessages(conversationId);

        // Mark as read immediately when opening conversation
        await markConversationAsRead(conversationId);
    }

    async function markConversationAsRead(conversationId) {
        try {
            await fetch(`/api/messaging/conversations/${conversationId}/read`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            // Update the unread count after marking as read
            updateUnreadCounts();
        } catch (error) {
            console.error('Error marking conversation as read:', error);
        }
    }

    async function loadMessages(conversationId) {
        try {
            const response = await fetch(`/api/messaging/conversations/${conversationId}/messages`);
            if (!response.ok) throw new Error('Failed to load messages');

            const messages = await response.json();
            renderMessages(messages);
        } catch (error) {
            console.error('Error loading messages:', error);
            showError('Failed to load messages');
        }
    }

    function renderMessages(messages) {
        const container = document.getElementById('messagesContainer');
        const currentUserId = document.body.getAttribute('data-user-id');

        if (messages && messages.length > 0) {
            container.innerHTML = messages.map(msg => `
                <div class="message p-3 max-w-xs ${msg.senderId === currentUserId ? 'message-sent' : 'message-received'}">
                    <div class="text-sm">${msg.content}</div>
                    <div class="text-xs mt-1 opacity-70">${new Date(msg.sentAt).toLocaleTimeString()}</div>
                </div>
            `).join('');
        } else {
            container.innerHTML = `
                <div class="flex flex-col items-center justify-center h-full text-gray-500">
                    <div class="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mb-4">
                        <i class="fas fa-comment-slash text-gray-400 text-xl"></i>
                    </div>
                    <p class="font-medium text-gray-600 mb-2">No messages yet</p>
                    <p class="text-sm text-gray-400 text-center">
                        Start the conversation by sending a message!
                    </p>
                </div>`;
        }

        scrollToBottom();
    }

    function sendMessage() {
        const input = document.getElementById('messageInput');
        const content = input.value.trim();

        if (content && currentReceiverId && currentConnection) {
            currentConnection.invoke('SendMessage', currentReceiverId, content)
                .then(() => {
                    input.value = '';
                })
                .catch(err => {
                    console.error('Error sending message:', err);
                    showError('Failed to send message');
                });
        }
    }

    function addMessageToChat(message, isSent) {
        const container = document.getElementById('messagesContainer');
        const currentUserId = document.body.getAttribute('data-user-id');

        // Clear the "no messages" state if it exists
        if (container.querySelector('.flex-col')) {
            container.innerHTML = '';
        }

        const messageElement = document.createElement('div');
        messageElement.className = `message p-3 max-w-xs ${isSent ? 'message-sent' : 'message-received'}`;
        messageElement.innerHTML = `
            <div class="text-sm">${message.content}</div>
            <div class="text-xs mt-1 opacity-70">${new Date(message.sentAt).toLocaleTimeString()}</div>
        `;

        container.appendChild(messageElement);
        scrollToBottom();
    }

    function scrollToBottom() {
        const container = document.getElementById('messagesContainer');
        if (container) {
            container.scrollTop = container.scrollHeight;
        }
    }

    async function updateUnreadCounts() {
        try {
            console.log('Updating unread message count...');
            const response = await fetch('/api/messaging/unread-count');
            if (!response.ok) throw new Error('Failed to load unread count');

            const data = await response.json();
            console.log('Unread count data:', data);

            const badge = document.getElementById('unreadMessagesBadge');
            if (badge) {
                if (data.count > 0) {
                    badge.textContent = data.count > 99 ? '99+' : data.count;
                    badge.classList.remove('hidden');
                    // Use Tailwind's built-in animation instead of custom keyframes
                    badge.classList.add('animate-ping');

                    // Remove animation after 2 seconds
                    setTimeout(() => {
                        badge.classList.remove('animate-ping');
                    }, 2000);
                } else {
                    badge.classList.add('hidden');
                    badge.classList.remove('animate-ping');
                }
            } else {
                console.warn('Unread messages badge element not found');
            }
        } catch (error) {
            console.error('Error updating unread counts:', error);
        }
    }

    function startNewConversation(userId, userName) {
        console.log('Starting new conversation with:', userId, userName);

        currentReceiverId = userId;
        currentConversationId = null;

        // Hide search results
        document.getElementById('searchResults').classList.add('hidden');
        document.getElementById('userSearch').value = '';

        // Show chat interface
        document.getElementById('conversationsList').classList.add('hidden');
        document.getElementById('activeChat').classList.remove('hidden');

        // Clear messages and show placeholder
        document.getElementById('messagesContainer').innerHTML = `
            <div class="flex flex-col items-center justify-center h-full text-gray-500">
                <div class="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mb-4">
                    <i class="fas fa-comments text-gray-400 text-xl"></i>
                </div>
                <p class="font-medium text-gray-600 mb-2">New conversation</p>
                <p class="text-sm text-gray-400 text-center">
                    Start chatting with ${userName}
                </p>
            </div>
        `;

        // Enable message input
        document.getElementById('messageInput').disabled = false;
        document.getElementById('sendMessage').disabled = false;

        // Set chat header
        document.getElementById('chatUserName').textContent = userName;
        updateUserStatus(false); // Default to offline until we know

        // Check online status for new conversation
        if (currentConnection) {
            currentConnection.invoke("GetOnlineUsers")
                .then(onlineUsers => {
                    const isOnline = onlineUsers.includes(userId);
                    updateUserStatus(isOnline);
                })
                .catch(err => console.error('Error getting online users:', err));
        }
    }

    function showNewMessageNotification(message) {
        console.log('New message received in another conversation:', message);

        // Optional: Show a small notification
        if (Notification.permission === 'granted') {
            new Notification('New Message', {
                body: `You have a new message`,
                icon: '/favicon.ico'
            });
        }
    }

    function startPeriodicRefresh() {
        // Update unread counts every 30 seconds
        setInterval(updateUnreadCounts, 30000);
    }

    function showError(message) {
        console.error('Error:', message);
    }

    function debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }
</script>

<style>
    .conversation-item.active {
        background-color: #eff6ff;
        border-left: 3px solid #3b82f6;
    }

    .message-sent {
        background: linear-gradient(135deg, #3b82f6, #1d4ed8);
        color: white;
        margin-left: auto;
        border-radius: 1rem 1rem 0.25rem 1rem;
        max-width: 70%;
        box-shadow: 0 2px 4px rgba(59, 130, 246, 0.2);
    }

    .message-received {
        background: white;
        color: #374151;
        margin-right: auto;
        border-radius: 1rem 1rem 1rem 0.25rem;
        max-width: 70%;
        border: 1px solid #e5e7eb;
        box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
    }

    /* Custom scrollbar */
    .overflow-y-auto::-webkit-scrollbar {
        width: 6px;
    }

    .overflow-y-auto::-webkit-scrollbar-track {
        background: #f1f5f9;
    }

    .overflow-y-auto::-webkit-scrollbar-thumb {
        background: #cbd5e1;
        border-radius: 3px;
    }

        .overflow-y-auto::-webkit-scrollbar-thumb:hover {
            background: #94a3b8;
        }
</style>